---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-prometheus
  namespace: kube-system
  resourceVersion: '2517'
  labels:
    app: monitoring-prometheus
    chart: ibm-icpmonitoring-1.4.0
    component: prometheus
    heritage: Tiller
    release: monitoring
data:
  prometheus.yml: "global:\n  scrape_interval: 1m\n  evaluation_interval: 1m\n\nalerting:\n
    \ alertmanagers:\n  - static_configs:\n    - targets:\n      - 'monitoring-prometheus-alertmanager:9093'\n
    \   scheme: https\n    tls_config:\n      cert_file: /opt/ibm/monitoring/certs/tls.crt\n
    \     key_file: /opt/ibm/monitoring/certs/tls.key\n      insecure_skip_verify:
    true\n\nrule_files:\n  - /etc/alert-rules/*.rules\n  - /etc/alert-rules/*.yml\n\nscrape_configs:\n
    \ - job_name: prometheus\n    static_configs:\n      - targets:\n        - 127.0.0.1:9090\n
    \   metrics_path: /prometheus/metrics\n\n  # A scrape configuration for running
    Prometheus on a Kubernetes cluster.\n  # This uses separate scrape configs for
    cluster components (i.e. API server, node)\n  # and services to allow each to
    use different authentication configs.\n  #\n  # Kubernetes labels will be added
    as Prometheus labels on metrics via the\n  # `labelmap` relabeling action.\n\n
    \ # Scrape config for API servers.\n  #\n  # Kubernetes exposes API servers as
    endpoints to the default/kubernetes\n  # service so this uses `endpoints` role
    and uses relabelling to only keep\n  # the endpoints associated with the default/kubernetes
    service using the\n  # default named port `https`. This works for single API server
    deployments as\n  # well as HA API server deployments.\n  - job_name: 'kubernetes-apiservers'\n\n
    \   kubernetes_sd_configs:\n      - role: endpoints\n\n    # Default to scraping
    over https. If required, just disable this or change to\n    # `http`.\n    scheme:
    https\n\n    # This TLS & bearer token file config is used to connect to the actual
    scrape\n    # endpoints for cluster components. This is separate to discovery
    auth\n    # configuration because discovery & scraping are two separate concerns
    in\n    # Prometheus. The discovery auth config is automatic if Prometheus runs
    inside\n    # the cluster. Otherwise, more config options have to be provided
    within the\n    # <kubernetes_sd_config>.\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \     # If your node certificates are self-signed or use a different CA to the\n
    \     # master CA, then disable certificate verification below. Note that\n      #
    certificate verification is an integral part of a secure infrastructure\n      #
    so this should only be disabled in a controlled environment. You can\n      #
    disable certificate verification by uncommenting the line below.\n      #\n      insecure_skip_verify:
    true\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n
    \   # Keep only the default/kubernetes service endpoints for the https port. This\n
    \   # will add targets for each API server which Kubernetes adds an endpoint to\n
    \   # the default/kubernetes service.\n    relabel_configs:\n      - source_labels:
    [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n
    \       action: keep\n        regex: default;kubernetes;https\n\n  - job_name:
    'kubernetes-nodes'\n\n    # Default to scraping over https. If required, just
    disable this or change to\n    # `http`.\n    scheme: https\n\n    # This TLS
    & bearer token file config is used to connect to the actual scrape\n    # endpoints
    for cluster components. This is separate to discovery auth\n    # configuration
    because discovery & scraping are two separate concerns in\n    # Prometheus. The
    discovery auth config is automatic if Prometheus runs inside\n    # the cluster.
    Otherwise, more config options have to be provided within the\n    # <kubernetes_sd_config>.\n
    \   tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n
    \     # If your node certificates are self-signed or use a different CA to the\n
    \     # master CA, then disable certificate verification below. Note that\n      #
    certificate verification is an integral part of a secure infrastructure\n      #
    so this should only be disabled in a controlled environment. You can\n      #
    disable certificate verification by uncommenting the line below.\n      #\n      insecure_skip_verify:
    true\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n
    \   kubernetes_sd_configs:\n      - role: node\n\n    relabel_configs:\n      -
    action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - target_label:
    __address__\n        replacement: kubernetes.default.svc:443\n      - source_labels:
    [__meta_kubernetes_node_name]\n        regex: (.+)\n        target_label: __metrics_path__\n
    \       replacement: /api/v1/nodes/${1}/proxy/metrics\n\n  # Scrape config for
    Kubelet cAdvisor.\n  #\n  # This is required for Kubernetes 1.7.3 and later, where
    cAdvisor metrics\n  # (those whose names begin with 'container_') have been removed
    from the\n  # Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint
    to\n  # retrieve those metrics.\n  #\n  # In Kubernetes 1.7.0-1.7.2, these metrics
    are only exposed on the cAdvisor\n  # HTTP endpoint; use \"replacement: /api/v1/nodes/${1}:4194/proxy/metrics\"\n
    \ # in that case (and ensure cAdvisor's HTTP server hasn't been disabled with\n
    \ # the --cadvisor-port=0 Kubelet flag).\n  #\n  # This job is not necessary and
    should be removed in Kubernetes 1.6 and\n  # earlier versions, or it will cause
    the metrics to be scraped twice.\n  - job_name: 'kubernetes-cadvisor'\n\n    #
    Default to scraping over https. If required, just disable this or change to\n
    \   # `http`.\n    scheme: https\n\n    # This TLS & bearer token file config
    is used to connect to the actual scrape\n    # endpoints for cluster components.
    This is separate to discovery auth\n    # configuration because discovery & scraping
    are two separate concerns in\n    # Prometheus. The discovery auth config is automatic
    if Prometheus runs inside\n    # the cluster. Otherwise, more config options have
    to be provided within the\n    # <kubernetes_sd_config>.\n    tls_config:\n      ca_file:
    /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n
    \   kubernetes_sd_configs:\n    - role: node\n\n    relabel_configs:\n    - action:
    labelmap\n      regex: __meta_kubernetes_node_label_(.+)\n    - target_label:
    __address__\n      replacement: kubernetes.default.svc:443\n    - source_labels:
    [__meta_kubernetes_node_name]\n      regex: (.+)\n      target_label: __metrics_path__\n
    \     replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n\n    metric_relabel_configs:\n
    \   - source_labels: ['namespace']\n      regex: (.*)\n      target_label: kubernetes_namespace\n\n
    \ # Scrape config for service endpoints.\n  #\n  # The relabeling allows the actual
    service scrape endpoint to be configured\n  # via the following annotations:\n
    \ #\n  # * `prometheus.io/scrape`: Only scrape services that have a value of `true`\n
    \ # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will
    need\n  # to set this to `https` & most likely set the `tls_config` of the scrape
    config.\n  # * `prometheus.io/path`: If the metrics path is not `/metrics` override
    this.\n  # * `prometheus.io/port`: If the metrics are exposed on a different port
    to the\n  # service then set this appropriately.\n  - job_name: 'kubernetes-service-endpoints'\n\n
    \   kubernetes_sd_configs:\n      - role: endpoints\n\n    relabel_configs:\n
    \     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n
    \       action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n
    \       action: drop\n        regex: https\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n
    \       action: replace\n        target_label: __scheme__\n        regex: (https?)\n
    \     - source_labels: [__meta_kubernetes_endpoint_port_name, __meta_kubernetes_service_annotation_filter_by_port_name]\n
    \       action: drop\n        regex: ^([^m].+|m[^e].+|me[^t].+|met[^r].+|metr[^i].+|metri[^c].+|metric[^s]).*;true
    \n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n
    \       action: replace\n        target_label: __metrics_path__\n        regex:
    (.+)\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n
    \       action: replace\n        target_label: __address__\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n
    \       replacement: $1:$2\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n
    \     - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n
    \       target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n
    \       action: replace\n        target_label: kubernetes_name\n\n  # Scrape config
    for service endpoints with tls enabled.\n  #\n  # The relabeling allows the actual
    service scrape endpoint to be configured\n  # via the following annotations:\n
    \ #\n  # * `prometheus.io/scrape`: Only scrape services that have a value of `true`\n
    \ # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will
    need\n  # to set this to `https` & most likely set the `tls_config` of the scrape
    config.\n  # * `prometheus.io/path`: If the metrics path is not `/metrics` override
    this.\n  # * `prometheus.io/port`: If the metrics are exposed on a different port
    to the\n  # service then set this appropriately.\n  - job_name: 'kubernetes-service-endpoints-with-tls'\n\n
    \   kubernetes_sd_configs:\n      - role: endpoints\n\n    relabel_configs:\n
    \     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n
    \       action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_skip_verify]\n
    \       action: drop\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n
    \       action: keep\n        regex: https\n      - source_labels: [__meta_kubernetes_endpoint_port_name,
    __meta_kubernetes_service_annotation_filter_by_port_name]\n        action: drop\n
    \       regex: ^([^m].+|m[^e].+|me[^t].+|met[^r].+|metr[^i].+|metri[^c].+|metric[^s]).*;true\n
    \     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n
    \       action: replace\n        target_label: __metrics_path__\n        regex:
    (.+)\n      - source_labels: [__address__, __meta_kubernetes_namespace]\n        action:
    replace\n        target_label: __address__\n        regex: (\\d+).(\\d+).(\\d+).(\\d+):(\\d+);(.+)\n
    \       replacement: $1-$2-$3-$4.$6.pod.cluster.local:$5\n      - source_labels:
    [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n        action:
    replace\n        target_label: __address__\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n
    \       replacement: $1:$2\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n
    \     - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n
    \       target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n
    \       action: replace\n        target_label: kubernetes_name\n\n    scheme:
    https\n\n    tls_config:\n      ca_file: /opt/ibm/monitoring/caCerts/tls.crt\n
    \     cert_file: /opt/ibm/monitoring/certs/tls.crt\n      key_file: /opt/ibm/monitoring/certs/tls.key\n
    \     insecure_skip_verify: false\n  - job_name: 'node-exporter-endpoints-with-tls'\n\n
    \   kubernetes_sd_configs:\n      - role: endpoints\n\n    relabel_configs:\n
    \     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n
    \       action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_skip_verify]\n
    \       action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n
    \       action: keep\n        regex: https\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n
    \       action: replace\n        target_label: __metrics_path__\n        regex:
    (.+)\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n
    \       action: replace\n        target_label: __address__\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n
    \       replacement: $1:$2\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n
    \     - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n
    \       target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n
    \       action: replace\n        target_label: kubernetes_name\n\n    scheme:
    https\n\n    tls_config:\n      ca_file: /opt/ibm/monitoring/caCerts/tls.crt\n
    \     cert_file: /opt/ibm/monitoring/certs/tls.crt\n      key_file: /opt/ibm/monitoring/certs/tls.key\n
    \     insecure_skip_verify: true\n\n  # Example scrape config for probing services
    via the Blackbox Exporter.\n  #\n  # The relabeling allows the actual service
    scrape endpoint to be configured\n  # via the following annotations:\n  #\n  #
    * `prometheus.io/probe`: Only probe services that have a value of `true`\n  -
    job_name: 'kubernetes-services'\n\n    metrics_path: /probe\n    params:\n      module:
    [http_2xx]\n\n    kubernetes_sd_configs:\n      - role: service\n\n    relabel_configs:\n
    \     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\n
    \       action: keep\n        regex: true\n      - source_labels: [__address__]\n
    \       target_label: __param_target\n      - target_label: __address__\n        replacement:
    blackbox\n      - source_labels: [__param_target]\n        target_label: instance\n
    \     - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n
    \     - source_labels: [__meta_kubernetes_namespace]\n        target_label: kubernetes_namespace\n
    \     - source_labels: [__meta_kubernetes_service_name]\n        target_label:
    kubernetes_name\n\n  # Example scrape config for pods\n  #\n  # The relabeling
    allows the actual pod scrape endpoint to be configured via the\n  # following
    annotations:\n  #\n  # * `prometheus.io/scrape`: Only scrape pods that have a
    value of `true`\n  # * `prometheus.io/path`: If the metrics path is not `/metrics`
    override this.\n  # * `prometheus.io/port`: Scrape the pod on the indicated port
    instead of the default of `9102`.\n  - job_name: 'kubernetes-pods'\n\n    kubernetes_sd_configs:\n
    \     - role: pod\n\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n
    \       action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n
    \       action: replace\n        target_label: __metrics_path__\n        regex:
    (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n
    \       action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement:
    ${1}:${2}\n        target_label: __address__\n      - action: labelmap\n        regex:
    __meta_kubernetes_pod_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n
    \       action: replace\n        target_label: kubernetes_namespace\n      - source_labels:
    [__meta_kubernetes_pod_name]\n        action: replace\n        target_label: kubernetes_pod_name\n
    \     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_target]\n
    \       action: replace\n        target_label: __param_target\n        regex:
    (.*)\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_module]\n
    \       action: replace\n        target_label: __param_module\n        regex:
    (.*)\n  - job_name: etcd\n    scheme: https\n    static_configs:\n    - targets:\n
    \     - \"192.168.56.100:4001\"\n    tls_config:\n      ca_file: /etc/etcd/etcd-ca\n
    \     cert_file: /etc/etcd/etcd-cert\n      key_file: /etc/etcd/etcd-key\n      insecure_skip_verify:
    true"

